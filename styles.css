*,
      ::before,
      ::after {
        padding: 0;
        margin: 0;
        box-sizing: border-box;
      }

      html {
        /*
        This will set the default font size for your web page to 10px (the browser default is 16px).
        */
        font-size: 62.5%;
      }

      body {
        font-family: Baskervville, serif;
        color: linen;
        background-color: rgb(20, 30, 40);
      }

      h1 {
        font-family: Anton, sans-serif;
      }

      h2,
      h3,
      h4,
      h5,
      h6 {
        font-family: Raleway, sans-serif;
      }

      a {
        text-decoration: none;
        color: linen;
      }

      main {
        /*
        CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally 
        and vertically while still retaining control to do things like overlap elements.
        */
        display: grid;

        /*
        Use the minmax function to make your columns responsive on any device. 
        The minmax function takes two arguments, the first being the minimum value and the second being the maximum. 
        These values could be a length, percentage, fr, or even a keyword like max-content.
        */
        grid-template-columns:
          minmax(2rem, 1fr)
          minmax(min-content, 94rem)
          minmax(2rem, 1fr);
        row-gap: 3rem;
      }

      img {
        width: 100%;

        /*
        The object-fit property tells the browser how to position the element within its container. 
        In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.
        */
        object-fit: cover;
      }

      hr {
        margin: 1.5rem 0;

        /*
        To give the hr a color, you need to adjust the border property.
        */
        border: 1px solid rgba(120, 120, 120, 0.6);
      }

      .social-icons {
        display: grid;
        font-size: 3rem;

        /*
        The default settings for CSS Grid will create additional rows as needed, unlike Flexbox
        
        To arrange the icons in a single row.
        */
        grid-template-columns: repeat(5, 1fr);

        /*
        If you wanted to add more social icons, but keep them on the same row, you would need to update grid-template-columns to create additional columns. 
        As an alternative, you can use the grid-auto-flow property.

        This property takes either row or column as the first value, with an optional second value of dense. 
        grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. 
        Setting it to column will tell the algorithm to create new columns for content as needed. 
        The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.
        */
        grid-auto-flow: column;

        /*
        Now the auto-placement algorithm will kick in when you add a new icon element. 
        However, the algorithm defaults the new column width to be auto, which will not match your current columns.

        You can override this with the grid-auto-columns property.
        */
        grid-auto-columns: 1fr;

        /*
        Much like Flexbox, with CSS Grid you can align the content of grid items with align-items and justify-items. 
        align-items will align child elements along the column axis, 
        and justify-items will align child elements along the row axis.

        Horizontly
        */
        align-items: center;
      }

      .heading {
        /*
        The grid-column property, which is shorthand for grid-column-start and grid-column-end. 
        The grid-column property tells the grid item which grid line to start and end at.

        This will tell the .heading element to start at grid line 2 and end at grid line 3.
        */
        grid-column: 2 / 3;
        display: grid;

        /*
        The CSS repeat() function is used to repeat a value, rather than writing it out manually, and is helpful for grid layouts. 
        For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide.
        */
        grid-template-columns: repeat(2, 1fr);
        row-gap: 1.5rem;
      }

      .hero {
        /*
        There may be times where you are unsure of how many columns your grid will have, 
        but you want an element to stop at the last column. 
        To do this, you can use -1 for the end column.

        This will tell the element to span the full width of the grid.
        */
        grid-column: 1 / -1;
        position: relative;
      }

      .hero-title {
        text-align: center;
        color: orangered;
        font-size: 8rem;
      }

      .hero-subtitle {
        text-align: center;
        color: orangered;
        font-size: 2.4rem;
      }

      .author {
        font-size: 2rem;
        font-family: Raleway, sans-serif;
      }

      .author-name a:hover {
        background-color: #306203;
      }

      .publish-date {
        color: rgba(255, 255, 255, 0.5);
      }

      .quote {
        color: #00beef;
        font-size: 2.4rem;
        text-align: center;
        font-family: Raleway, sans-serif;
      }

      /* With a space following it */
      .quote::before {
        content: '" ';
      }

      /* With a space preceding it */
      .quote::after {
        content: ' "';
      }

      .text {
        grid-column: 2 / 3;
        font-size: 1.8rem;
        letter-spacing: 0.6px;

        /*
        Your .text element is not a CSS Grid, but you can create columns within an element without using Grid by using the column-width property.
        */
        column-width: 25rem;

        /*
        Magazines often use justified text in their printed content to structure their layout and control the flow of their content. 
        While this works in printed form, justified text on websites can be an accessibility concern, for example presenting challenges for folks with dyslexia.
        
        To make your project look like a printed magazine, give the .text selector a text-align property set to justify.
        */
        text-align: justify;
      }

      /*
      Now it's time to style your third section. 
      Note that it has the text and text-with-images values for the class attribute, which means it is already inheriting the styles from your .text rule.
      */
      .text-with-images {
        display: grid;
        grid-template-columns: 1fr 2fr;
        column-gap: 3rem;
        margin-bottom: 3rem;
      }

      /* The S letter */
      .first-paragraph::first-letter {
        font-size: 6rem;
        color: orangered;

        /*
        The other text has been shifted out of place. 
        Move it into position by giving the .first-paragraph::first-letter selector 
        a float property set to left and a margin-right property set to 1rem.
        */
        float: left;
        margin-right: 1rem;
      }

      .lists {
        list-style-type: none;
        margin-top: 2rem;
      }

      .lists li {
        margin-bottom: 1.5rem;
      }

      .list-title,
      .list-subtitle {
        color: #00beef;
      }

      .image-wrapper {
        display: grid;

        /* The images should be within a two column, three row layout. */
        grid-template-columns: 2fr 1fr;

        /* 
        This will give our grid rows that adjust in height based on the content, 
        but columns that remain a fixed width based on the container.
        */
        grid-template-rows: repeat(3, min-content);

        /*
        The gap property is a shorthand way to set the value of column-gap and row-gap at the same time. 
        If given one value, it sets the column-gap and row-gap both to that value. 
        If given two values, it sets the row-gap to the first value and the column-gap to the second.
        */
        gap: 2rem;

        /*
        The place-items property can be used to set the align-items and justify-items values at the same time. 
        The place-items property takes one or two values. If one value is provided, it is used for both the align-items and justify-items properties. 
        If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property.
        */
        place-items: center;
      }

      .image-1,
      .image-3 {
        grid-column: 1 / -1;
      }

      @media only screen and (max-width: 720px) {
        .image-wrapper {
          grid-template-columns: 1fr;
        }
      }

      @media only screen and (max-width: 600px) {
        .text-with-images {
          /* This will collapse your bottom text area into a single column on smaller screens. */
          grid-template-columns: 1fr;
        }
      }

      @media only screen and (max-width: 550px) {
        .hero-title {
          font-size: 6rem;
        }

        .hero-subtitle,
        .author,
        .quote,
        .list-title {
          font-size: 1.8rem;
        }

        .social-icons {
          font-size: 2rem;
        }

        .text {
          font-size: 1.6rem;
        }
      }

      @media only screen and (max-width: 420px) {
        .hero-title {
          font-size: 4.5rem;
        }
      }